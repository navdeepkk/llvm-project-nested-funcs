#include "/home/navdeep/work/projects/llvm-install/include/clang/AST/AST.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/AST/ASTContext.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/ASTMatchers/ASTMatchFinder.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/ASTMatchers/ASTMatchers.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/Basic/SourceManager.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/Frontend/CompilerInstance.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/Frontend/FrontendActions.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/Rewrite/Core/Rewriter.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/Tooling/CommonOptionsParser.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/Tooling/Refactoring.h"
#include "/home/navdeep/work/projects/llvm-install/include/clang/Tooling/Tooling.h"
#include "/home/navdeep/work/projects/llvm-install/include/llvm/Support/CommandLine.h"
#include "/home/navdeep/work/projects/llvm-install/include/llvm/Support/raw_ostream.h"
#include <sstream>
#include <string>
#include <unordered_map>
#include <vector>
using namespace clang::SrcMgr;
using namespace clang::tooling;
using namespace clang::ast_matchers;
using namespace llvm;
using namespace clang;
using namespace std;
using namespace clang::driver;
//----------------------------------------------------global
// decls----------------------------------------------//
struct GlobalVars {
  std::string name;
  std::string type;
};

struct scope {
  std::string name;
  std::unordered_map<std::string, std::string> vars;
};

std::vector<GlobalVars> globalVars;
std::vector<std::string> globalFuncDecls; 
std::vector<std::string> labels;
std::unordered_map<std::string, std::string> parenChilMap;
std::unordered_map<std::string, scope> scopes;

static llvm::cl::OptionCategory MyToolCategory("my-tool options");
static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
static cl::extrahelp MoreHelp("\nMore help text...\n");

std::unordered_map<std::string, std::string> sourceLocs;
std::unordered_map<std::string, int> callDepths;

std::vector<std::pair<std::string, int>> depthSorted;
std::unordered_map<std::string, bool> structMade;
// marked call depths is utility for finding call depths, marks all the calls as
// true. so they are not processed again.
std::unordered_map<std::string, bool> markedCallDepth;
DeclarationMatcher globalMatcher =
    varDecl(hasDeclContext(translationUnitDecl())).bind("global");
StatementMatcher labelMatcher = labelStmt().bind("label");
std::unordered_map<std::string, int> depths;
std::stringstream ss;
std::stringstream ss2;
//------------------------------------------------/global decls
// end-------------------------------------------//

//------------------------------------------------------logic to convert the
// label depths into a sorted list depthsorted.
typedef std::function<bool(std::pair<std::string, int>,
                           std::pair<std::string, int>)>
    Comparator;
Comparator compFunctor = [](std::pair<std::string, int> elem1,
                            std::pair<std::string, int> elem2) {
  return elem1.second < elem2.second;
};
//-----------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------classes and
// functions begin---------------------//
void structDump() {
  // building the structs of scope in order of depth.
  for (auto label : depthSorted) {
		//run only for those functions whose depth is not zero and also parenchilmap is not empty
    if (label.second != 0 && !parenChilMap[label.first].empty()) {
      ss << "struct s_" << label.first << " {\n"
         << "struct s_" << parenChilMap[label.first] << " * s;\n";
      for (auto var : scopes[label.first].vars) {
        // currently not adding any functionality to handle or structs any
        // differently.
        if (var.second.find('[') != std::string::npos) {
          ss << var.second.substr(0, var.second.find(' ')) << "* " << var.first
             << ":\n";
        } else {
          ss << var.second << "* " << var.first << ";\n";
          ;
        }
      }
      ss << "};\n\n";
    }
  }
}
//-------------------------------------------------------------------------------------------------------------//
class GlobalBuilder : public MatchFinder::MatchCallback {
public:
  GlobalBuilder(Rewriter &Rewrite) : Rewrite(Rewrite) {}
  GlobalVars temp;

  virtual void run(const MatchFinder::MatchResult &Result) {
    if (const VarDecl *vd = Result.Nodes.getNodeAs<clang::VarDecl>("global")) {
      temp.type = vd->getType().getAsString();
      // llvm::errs()<<"globalbuilder\n";
      // llvm::errs()<<vd->getType().getAsString()<<"\n";
      temp.name = vd->getQualifiedNameAsString();
      globalVars.push_back(temp);
    }
  }
  Rewriter &Rewrite;
};
//---------------------------------------------------------------------------------------------------------------//
class LabelFinder : public MatchFinder::MatchCallback {
public:
  LabelFinder(Rewriter &Rewrite) : Rewrite(Rewrite) {}
  virtual void run(const MatchFinder::MatchResult &Result) {
    SourceManager *sm = Result.SourceManager;
    if (const LabelStmt *ls =
            Result.Nodes.getNodeAs<clang::LabelStmt>("label")) {
      // llvm::errs()<<"labelfinder"<<ls->getName()<<"\n";
      std::string loc = ls->getBeginLoc().printToString(*sm);
      loc = loc.substr(loc.find(':') + 1, loc.find(':'));
      loc = loc.substr(0, loc.find(':'));
      sourceLocs[ls->getName() + loc] = loc;
      labels.push_back(ls->getName() + loc);
      // llvm::errs()<<loc<<"\n";
    }
  }
  Rewriter &Rewrite;
};
//--------------------------------------------------------------------------------------------------------------------//
class LabelRelBuilder : public MatchFinder::MatchCallback {
public:
  LabelRelBuilder(Rewriter &Rewrite) : Rewrite(Rewrite) {}
  virtual void run(const MatchFinder::MatchResult &Result) {
    SourceManager *sm = Result.SourceManager;
    if (const LabelStmt *ls =
            Result.Nodes.getNodeAs<clang::LabelStmt>("child")) {
      // find source loc of child
      std::string locls = ls->getBeginLoc().printToString(*sm);
      locls = locls.substr(locls.find(':') + 1, locls.find(':'));
      locls = locls.substr(0, locls.find(':'));
      // add the source loc of child into sourceLocs.
      sourceLocs[ls->getName() + locls] = locls;
      // if parent is a labelstmt.
      if (const LabelStmt *lp =
              Result.Nodes.getNodeAs<clang::LabelStmt>("parent")) {
        // find source loc of parent.
        std::string loclp = lp->getBeginLoc().printToString(*sm);
        loclp = loclp.substr(loclp.find(':') + 1, loclp.find(':'));
        loclp = loclp.substr(0, loclp.find(':'));
        sourceLocs[lp->getName() + loclp] = loclp;
        parenChilMap[ls->getName() + locls] = lp->getName() + loclp;
        depths[ls->getName() + locls] = depths[lp->getName() + loclp] + 1;
        // if parent is a function decl.
      } else if (const FunctionDecl *fd =
                     Result.Nodes.getNodeAs<clang::FunctionDecl>("parent")) {
        std::string loclp = fd->getBeginLoc().printToString(*sm);
        loclp = loclp.substr(loclp.find(':') + 1, loclp.find(':'));
        loclp = loclp.substr(0, loclp.find(':'));
        sourceLocs[fd->getNameAsString() + loclp] = loclp;
        parenChilMap[ls->getName() + locls] = fd->getNameAsString() + loclp;
        // assuming that the nodes are visited in order of depth. starting from
        // lowest depth.
        depths[ls->getName() + locls] = 1;
        depths[fd->getNameAsString() + loclp] = 0;
      }
    }
  }
  Rewriter &Rewrite;
};
//-------------------------------------------------------------------------------------------------------------------------//
class StructBuilder : public MatchFinder::MatchCallback {
public:
  StructBuilder(Rewriter &Rewrite) : Rewrite(Rewrite) {}

  virtual void run(const MatchFinder::MatchResult &Result) {
    SourceManager *const sm = Result.SourceManager;
    if (const VarDecl *vd = Result.Nodes.getNodeAs<clang::VarDecl>("child")) {
      // find the appropriate parent child pair to insert it in. itereate
      // through parenChilMap and check if the source loc of the vardecl is in
      // between of parent and child.
      std::string loc = vd->getBeginLoc().printToString(*sm);
      if (loc.find("invalid") == std::string::npos) {
        loc = loc.substr(loc.find(':') + 1, loc.find(':'));
        loc = loc.substr(0, loc.find(':'));
        int varloc = std::stoi(loc);
        for (auto elem : parenChilMap) {
          if (std::stoi(sourceLocs[elem.first]) > varloc &&
              varloc >= std::stoi(sourceLocs[elem.second])) {
            scopes[elem.first].name = elem.first;
            scopes[elem.first].vars[vd->getQualifiedNameAsString()] =
                vd->getType().getAsString();
          }
        }
      }
    }
  }
  Rewriter &Rewrite;
};
//---------------------------------------------------------------------------------------------------------------------------//
class StructDumper : public MatchFinder::MatchCallback {
public:
  StructDumper(Rewriter &Rewrite) : Rewrite(Rewrite) {}
  virtual void run(const MatchFinder::MatchResult &Result) {
    if (const FunctionDecl *fd =
            Result.Nodes.getNodeAs<clang::FunctionDecl>("main")) {
      sourceLoc = fd->getBeginLoc();
    }
  }
  virtual void onEndOfTranslationUnit() {
    depthSorted =
        std::vector<std::pair<std::string, int>>(depths.begin(), depths.end());
    std::sort(depthSorted.begin(), depthSorted.end(), compFunctor);
    structDump();
    Rewrite.InsertText(sourceLoc, ss.str(), true, true);
  }

private:
  Rewriter &Rewrite;
  SourceLocation sourceLoc;
};
//-----------------------------------------------------------------------------------------------------------------------//

class CallDepth : public MatchFinder::MatchCallback {
public:
  CallDepth() {}
  virtual void run(const MatchFinder::MatchResult &Result) {
    SourceManager *const sm = Result.SourceManager;
    if (const CallExpr *ce =
            Result.Nodes.getNodeAs<clang::CallExpr>("depth1")) {
      std::string callName =
          ce->getDirectCallee()->getNameInfo().getName().getAsString();
      llvm::errs() << "callee: " << callName << "\n";
      // find the source loc to find ce + sourceloc in labels vector.
      std::string loc = ce->getBeginLoc().printToString(*sm);
      loc = loc.substr(loc.find(':') + 1, loc.find(':'));
      loc = loc.substr(0, loc.find(':'));
       callDepths[callName + loc] = 1;
    } else if (const CallExpr *ce =
                   Result.Nodes.getNodeAs<clang::CallExpr>("depth")) {
      std::string callName =
          ce->getDirectCallee()->getNameInfo().getName().getAsString();
      // find source loc of call expr to find ce + sourceloc in labels vector.
      std::string loc = ce->getBeginLoc().printToString(*sm);
      loc = loc.substr(loc.find(':') + 1, loc.find(':'));
      loc = loc.substr(0, loc.find(':'));
      if (const LabelStmt *ls =
              Result.Nodes.getNodeAs<clang::LabelStmt>("parent")) {
        // find the loc of parent label to hash into the depths list.
        std::string lsloc = ls->getBeginLoc().printToString(*sm);
        lsloc = lsloc.substr(lsloc.find(':') + 1, lsloc.find(':'));
        lsloc = lsloc.substr(0, lsloc.find(':'));
        callDepths[callName + loc] = depths[ls->getName() + lsloc] + 1;
      }
    }
  }
};
//--------------------------------------------------------------------------------------------------------------------//
class GlobalFuncDeclFinder : public MatchFinder::MatchCallback {
public:
  GlobalFuncDeclFinder() {}
  virtual void run(const MatchFinder::MatchResult &Result) {			
    SourceManager *const sm = Result.SourceManager;
    if (const FunctionDecl *fd = Result.Nodes.getNodeAs<clang::FunctionDecl>("decl")) {		
        globalFuncDecls.push_back(fd->getNameAsString());
		}
	}
};
//----------------------------------------------------------------------------------------------------------------//
class CallResolver : public MatchFinder::MatchCallback {
public:
  CallResolver() {}
  virtual void run(const MatchFinder::MatchResult &Result) {			
    SourceManager *const sm = Result.SourceManager;
    if (const CallExpr *ce = Result.Nodes.getNodeAs<clang::CallExpr>("call")) {
      if (const LabelStmt *ls =
        Result.Nodes.getNodeAs<clang::LabelStmt>("parent")) {		
				std::string callName =
          ce->getDirectCallee()->getNameInfo().getName().getAsString();
				
			}
		}
	}
};
//--------------------------------------------------------------------------------------------------------------------------//

class StructInit : public MatchFinder::MatchCallback {
public:
  StructInit(Rewriter &Rewrite) : Rewrite(Rewrite) {}
  virtual void run(const MatchFinder::MatchResult &Result) {
    SourceManager *const sm = Result.SourceManager;
    if (const CallExpr *ce = Result.Nodes.getNodeAs<clang::CallExpr>("call")) {
      if (const LabelStmt *ls =
              Result.Nodes.getNodeAs<clang::LabelStmt>("parent")) {
        // bind the call expr and its parent label stmt.
        std::string callName =
            ce->getDirectCallee()->getNameInfo().getName().getAsString();
        if (std::find(labels.begin(), labels.end(), callName) != labels.end()) {
          if (structMade[ls->getName() + callName] == false) {
            // if the call is of a label stmt and a struct for it has not
            // already been initialized.
            structMade[ls->getName() + callName] = true;
            std::string loc = ce->getBeginLoc().printToString(*sm);
            loc = loc.substr(loc.find(':') + 1, loc.find(':'));
            loc = loc.substr(0, loc.find(':'));
            if (callDepths[callName + loc] == depths[callName]) {
              sourceLoc = ce->getBeginLoc();
              ss2 << "struct s_" << callName << " s" << callName << ";\n";
              // emit all the vars in the scope of that call.
              // add check to only emit if the var is not redefined in the
              // corresponding block.
              for (auto var : scopes[callName].vars) {
                // llvm::errs() << var.first << " " << var.second << " \n";
                ss2 << "s" << callName << "." << var.first << " = &"
                    << var.first << ";\n";
              }
              // llvm::errs() << ss2.str() << "\n";
              Rewrite.InsertText(sourceLoc, ss2.str(), true, true);
              Rewrite.InsertTextBefore(ce->getEndLoc(), "&s" + callName);
              ss2.str("");
            }
          }
        }
      }
    }
  }

private:
  Rewriter &Rewrite;
  SourceLocation sourceLoc;
};

//--------------------------------------------------------------------------------------------------------------------------//

class MyASTConsumer : public ASTConsumer {
public:
  MyASTConsumer(Rewriter &R)
      : globalBuilder(R), structDumper(R), labelRelBuilder(R), labelBuilder(R),
        structBuilder(R), callDepth(), structInit(R) {
    // all code from main goes here.
    // Find all the globals and labelStmt first.
    // Find all the globals and store them in struct with type and identfier.
    Finder.addMatcher(globalMatcher, &globalBuilder);
    // find all the labelStmt and store there name in a vector of strings.
    Finder.addMatcher(labelMatcher, &labelBuilder);
    // below matcher returns all node at depth level one.
    Finder.addMatcher(labelStmt(hasParent(compoundStmt(
                                    hasParent(functionDecl().bind("parent")))))
                          .bind("child"),
                      &labelRelBuilder);
    // find the parent child relationship of label statements by matching all
    // nodes having a compound statement as parent;
    Finder.addMatcher(
        labelStmt(hasAncestor(labelStmt().bind("parent"))).bind("child"),
        &labelRelBuilder);
    // for all nodes find the variables that need to be passed on into its
    // scope.
    DelayedFinder.addMatcher(varDecl(hasAncestor(functionDecl())).bind("child"),
                             &structBuilder);

    // after the call to structDumper the depths will be sorted. structDumper
    // has a logic to sort the depths. adding code to find the main function and
    // rewrite something there.
    DelayedFinder.addMatcher(functionDecl(hasName("main")).bind("main"),
                             &structDumper);
    // Next thing would be to find the depths of the call expressions, so
    // appropriate redirections for variables may be provided. first
    // finding all calls at depth one.
    DelayedFinder.addMatcher(
        callExpr(hasAncestor(functionDecl()), argumentCountIs(0)).bind("depth1"), &callDepth); 
    // finding the call expressions at more depths greater than .
		DelayedFinder.addMatcher(
        callExpr(hasAncestor(labelStmt().bind("parent")), argumentCountIs(0)).bind("depth"),
        &callDepth);
    // now the depths are in hand the logic to initialize scope srtuctures
    // before function calls must start. The below matcher inserts structs
    // intializations for function calls before the functions at a depth level
    // of one in label statements.
    //-------------------------------------------------------------------//
    //going to find global decls needed for call resolution
    DelayedFinder.addMatcher(functionDecl(hasParent(translationUnitDecl())).bind("decl"), &globalFuncDeclFinder);
    //first going to resolve calls before the strutcs are emitted are being overwritten.
    MatchCallResolver.addMatcher(callExpr(hasAncestor(labelStmt().bind("parent"))).bind("child"), &callResolver);
    // Use delayed finder2 from this point and beyond
    //DelayedFinder2.addMatcher(
    //    callExpr(hasAncestor(labelStmt().bind("parent"))).bind("call"),
    //    &structInit);
    // have to add a new matcher to add structures and call before functions
    // call from any function decl. to do this in the ast matcher bind the
    // nodes parent function decl and if it is the actual parent of the label
    // corresponding to the call
    // DelayedFinder2.addMatcher(callExpr(hasAncestor(functionDecl().bind("parent"))).bind("call"),
    //     &structInit);
  }

  void HandleTranslationUnit(ASTContext &Context) override {
    // Run the matchers when we have the whole TU parsed.
    Finder.matchAST(Context);
    /*
llvm::errs() << "soucrcelocs\n";

for (auto sl : sourceLocs) {
llvm::errs() << sl.first << " " << sl.second << " ";
}
    */
    /*
    llvm::errs()<<"labels: \n";
    for(auto label : labels){
            llvm::errs()<<label<<" ";
    }
*/
    /*
         llvm::errs() << "parenchil:\n";
         for (auto chil : parenChilMap) {
           llvm::errs() << chil.first << " " << chil.second << "\n";
         }
    */
    llvm::errs() << "depths:\n";
    for (auto depth : depths) {
      llvm::errs() << depth.first << " " << depth.second << "\n";
    }

    /*
         for (auto loc : sourceLocs) {
           llvm::errs() << loc.first << " " << loc.second << "\n";
         }
     */
		llvm::errs()<<;
    DelayedFinder.matchAST(Context);	
		for(auto x : globalFuncDecls){
		llvm::errs()<<x<<" ";
}
    /*
        for (auto label : labels) {
          llvm::errs() << label << "\n";
          for (auto var : scopes[label].vars) {
            llvm::errs() << var.first << " " << var.second;
          }
          llvm::errs() << "\n";
        }
    */
    /*
     for (auto label : labels) {
          llvm::errs() << label << "\n";
          for (auto var : scopes[label].vars) {
            llvm::errs() << var.first << " " << var.second;
          }
          llvm::errs() << "\n";
        }
    */
    // DelayedFinder2.matchAST(Context);
    llvm::errs() << "calldepths:\n";
    for (auto depths : callDepths) {
      llvm::errs() << depths.first << " " << depths.second << "\n";
    }
  }

private:
  GlobalBuilder globalBuilder;
  LabelFinder labelBuilder;
  LabelRelBuilder labelRelBuilder;
  StructBuilder structBuilder;
  StructDumper structDumper;
  CallDepth callDepth;
  StructInit structInit;
	CallResolver callResolver;
	GlobalFuncDeclFinder globalFuncDeclFinder;
  MatchFinder Finder;
  MatchFinder DelayedFinder;
  MatchFinder DelayedFinder2;
	MatchFinder MatchCallResolver;
};
//----------------------------------------------------------------------------------------------------------------------//
class MyFrontendAction : public ASTFrontendAction {
public:
  MyFrontendAction() {}
  Rewriter TheRewriter;

  void EndSourceFileAction() override {
    this->TheRewriter
        .getEditBuffer(this->TheRewriter.getSourceMgr().getMainFileID())
        .write(llvm::outs());
  }
  virtual std::unique_ptr<clang::ASTConsumer>
  CreateASTConsumer(clang::CompilerInstance &Compiler, llvm::StringRef InFile) {
    this->TheRewriter.setSourceMgr(Compiler.getSourceManager(),
                                   Compiler.getLangOpts());
    return std::unique_ptr<clang::ASTConsumer>(
        new MyASTConsumer(this->TheRewriter));
  }
};

//------------------------------------------------------------------------main
// starts--------------------------------//

int main(int argc, const char **argv) {
  CommonOptionsParser OptionsParser(argc, argv, MyToolCategory);
  ClangTool Tool(OptionsParser.getCompilations(),
                 OptionsParser.getSourcePathList());
  Tool.run(newFrontendActionFactory<MyFrontendAction>().get());
  return 0;
}
